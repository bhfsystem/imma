#!/usr/bin/env bash

function main {
  local shome="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"
  source "$shome/script/profile"
  source normalize

  local nm_role="$1"; shift
  local nm_prefix="${CONTEXT_ORG}_${nm_role#${CONTEXT_ORG}-}"

  local the_code="$(imma totp)"

  local tmp_credentials="$(mktemp -t XXXXXX)"
  trap "$(printf 'rm -vf "%q" 1>&2' "$tmp_credentials")" EXIT

  if [[ -f "$HOME/.aws/credentials-${CONTEXT_ORG}.gpg" ]]; then
    gpg -q --batch --yes --output "$tmp_credentials" --decrypt "$HOME/.aws/credentials-${CONTEXT_ORG}.gpg"
    export AWS_SHARED_CREDENTIALS_FILE="$tmp_credentials"
  fi

  local arn_role="$(cat "$HOME/.assume-aws-role/config" | jq -r --arg role "$nm_prefix" '.[$role].RoleArn')"
  local id_mfa="$(cat "$HOME/.assume-aws-role/config" | jq -r --arg role "$nm_prefix" '.[$role].SerialNumber')"
  local nm_region="$(cat "$HOME/.assume-aws-role/config" | jq -r --arg role "$nm_prefix" '.[$role].Region')"

  local tmp_sts="$(mktemp -t XXXXXX)"
  trap "$(printf 'rm -vf "%q" "%q" 1>&2' "$tmp_credentials" "$tmp_sts")" EXIT
  
  unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_DEFAULT_REGION
  aws sts assume-role --role-arn "$arn_role" --role-session-name "${CONTEXT_ORG}-$LOGNAME" --serial-number "$id_mfa" --token-code "$the_code" > "$tmp_sts"

  unset AWS_SHARED_CREDENTIALS_FILE
  rm -f "$tmp_credentials"

  export "${nm_prefix}_AWS_ACCESS_KEY_ID"="$(cat "$tmp_sts" | jq -r '.Credentials.AccessKeyId')"
  export "${nm_prefix}_AWS_SECRET_ACCESS_KEY"="$(cat "$tmp_sts" | jq -r '.Credentials.SecretAccessKey')"
  export "${nm_prefix}_AWS_SESSION_TOKEN"="$(cat "$tmp_sts" | jq -r '.Credentials.SessionToken')"
  rm -f "$tmp_sts"

  if [[ -n "$nm_region" ]]; then
    export "${nm_prefix}_AWS_DEFAULT_REGION"="$nm_region"
  else
    unset "${nm_prefix}_AWS_DEFAULT_REGION"
  fi
  
  unset AWS_PROFILE

  if [[ "$#" == 0 ]]; then
    set | egrep '^'"${nm_prefix}_" | sed 's#^#export #'
  else
    exec "$@"
  fi
}

source sub "$BASH_SOURCE" "$@"
