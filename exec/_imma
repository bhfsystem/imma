#!/usr/bin/env bash

function use_global {
  hcltool "$shome/module/global/variables.tf" | jq --arg tfmod global '{data: (.data//{}), provider: (.provider//{}), variable: (.variable//{} as $vars | reduce (.variable | keys[]) as $v ({}; .[$v] = $vars[$v])), output: (.output//{} | reduce keys[] as $o ({}; .[$o] = {value: "${module.\($tfmod).\($o)}"}))}'
}

function use_env {
  hcltool "$shome/module/env/variables.tf" | jq --arg tfmod env '{data: (.data//{}), provider: (.provider//{}), variable: (.variable//{} as $vars | reduce (.variable | keys[]) as $v ({}; .[$v] = $vars[$v])), output: (.output//{} | reduce keys[] as $o ({}; .[$o] = {value: "${module.\($tfmod).\($o)}"}))}'
}

function use_app {
  hcltool "$shome/module/app/variables.tf" | jq --arg tfmod app '{data: (.data//{}), provider: (.provider//{}), variable: (.variable//{} as $vars | reduce (.variable | keys[]) as $v ({}; .[$v] = $vars[$v])), output: (.output//{} | reduce keys[] as $o ({}; .[$o] = {value: "${module.\($tfmod).\($o)}"}))}'
}

function az_count {
  aws ec2 describe-availability-zones --region $(cat ../.terraform/terraform.tfstate | jq -r --arg env_name "$nm_env" '.modules[0].outputs.env_region.value[$env_name]') | jq -r '.AvailabilityZones | length'
}

function gen_global { 
  hcltool "$shome/common/global.tf" 
  hcltool "$shome/common/site.tf" 
}

function gen_env { 
  shift
  hcltool "$shome/common/env.tf" 
}

function gen_app {
  shift
  shift
  hcltool "$shome/common/app.tf"
  gen_services "$@" 
}

function gen_services {
  for s in "$@"; 
    do jq -n -r --argfile service <(hcltool "$shome/common/service.tf") '$service' | sed "s#SERVICE#${s}#g"
  done
}

function merge_map {
  jq -s 'reduce .[] as $e ({}; . * $e)'
}

function _main {
  source normalize

  gen \
    <("gen_${BASH_SOURCE[2]##*-}" "$@" | merge_map) \
    <("use_${BASH_SOURCE[2]##*-}") \
    "$@" | jq -S .
}

_main "$@"
