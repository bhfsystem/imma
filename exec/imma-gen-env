#!/usr/bin/env bash

function az_count_env {
  aws ec2 describe-availability-zones --region $(cat ../../env/global/.terraform/terraform.tfstate | jq -r --arg env_name "$nm_env" '.modules[0].outputs.env_region.value[$env_name]') | jq -r '.AvailabilityZones | length'
}

function az_count_app {
  cat ../../env/$nm_env/.terraform/terraform.tfstate | jq -r '.modules[0].outputs.az_count.value'
}

function gen_env { 
  hcltool "$shome/common/global.tf"
  hcltool "$shome/common/env.tf" 
}

function gen_app {
  hcltool "$shome/common/app.tf"
}

function gen_services {
  for s in "$@"; 
    do jq -n -r --argfile service <(hcltool "$shome/common/service.tf") '$service' | sed "s#SERVICE#${s}#g"
  done
}

function merge_map {
  jq -s 'reduce .[] as $e ({}; . * $e)'
}

function main {
  local shome="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"
  source "$shome/script/profile"
  source normalize

  local nm_env="$1"; shift

  local tmp_fogg="$(mktemp -t XXXXXX)"
  { gen_env
  } | merge_map > "$tmp_fogg"

	jq -n \
        --arg     az_count "$(az_count_env)" \
		    --argfile modules  "../../module/env/export.json" \
        --argfile seed     "$tmp_fogg" \
	      --arg     env_name "$nm_env" \
        '$seed * $modules |
            .variable.global_remote_state |= { default: "../../env/global/.terraform/terraform.tfstate" } |
            .variable.az_count            |= { default: "\($az_count)" } |
            .variable.env_name            |= { default: "\($env_name)" }'
}

source sub "$BASH_SOURCE" "$@"
